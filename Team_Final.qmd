---
title: "6103 Team"
author: Brooklyn Chen, Manojkumar Yerraguntla, Nayaeun Kwon
format:
    html:    
        code-fold: true
        number-sections: true
        toc: true
        toc-depth: 6
        toc-float: true
        toc-location: left
execute: 
  result: hide
  warning: false
---

```{python}
#| output: false
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import rfit 
import plotly.express as px
import scipy.stats as stats
import sklearn
from sklearn.datasets import load_boston 
import researchpy as rp
from scipy.stats import pearsonr
import missingno as msno
import pandas_profiling as pp

pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
pd.set_option('display.width', 1000)
pd.set_option('display.colheader_justify', 'center')
pd.set_option('display.precision', 3)
```

# Dataset
```{python}
#| output: false

# Setting Dataset
old_df=pd.read_csv('Levels_Fyi_Salary_Data.csv')

# Explore Dataset
old_dfprofile = pp.ProfileReport(old_df)
old_dfprofile
```
```{python}
# Preprocessing Dataset
df = old_df[['timestamp','company','title','location','yearsofexperience','yearsatcompany', 'gender']].dropna()
df['yearlysalary'] = old_df['totalyearlycompensation']
df['timestamp'] = pd.to_datetime(df['timestamp']).dt.strftime('%Y')
```
```{python}
# Check new dataset
dfprofile = pp.ProfileReport(df)
dfprofile
```
Total 30 variables.

timestamp: When the data was recorded
company: Company name
title: Jop title
* totalyearlycompensation: Total yearly earning
location: Job location
yearsofexperience: Year of Experience
yearsatcompany: Years of experience at said company
gender:


Remove following variables:
level: What level the observation is at
otherdetails:
tag
basesalary, stockgrantvalue, bonus is combined into total eyarlycompensation. 
cityid
dmaid
rowNumber
Race
Education


# 1. Is there a significant difference between the yearly salary in top 10 companies and the yearly salary in not-top-10 companies? B 

List all the companys in this dataframe
```{python}
print(f"the unique values:\n{pd.unique(df.company)}")
```

Removing the Outliers of yearlysalary

```{python}
df1 = df.copy()
print ("Shape Of The Before Ouliers: ",df.shape)
n=1.5
IQR_1 = np.percentile(df1['yearlysalary'],75) - np.percentile(df1['yearlysalary'],25)
#outlier = Q3 + n*IQR 8
df1=df1[df1['yearlysalary'] < np.percentile(df1['yearlysalary'],75)+n*IQR_1]
#outlier = Q1 - n*IQR 
df1=df1[df1['yearlysalary'] > np.percentile(df1['yearlysalary'],25)-n*IQR_1]
print ("Shape Of The After Ouliers: ",df1.shape)
```

Removing the Outliers of yearsatcompany
```{python}
df2 = df1.copy()
print ("Shape Of The Before Ouliers: ",df.shape)
n=1.5
IQR_2 = np.percentile(df2['yearsatcompany'],75) - np.percentile(df2['yearsatcompany'],25)
#outlier = Q3 + n*IQR 
df2=df2[df2['yearsatcompany'] < np.percentile(df2['yearsatcompany'],75)+n*IQR_2]
#outlier = Q1 - n*IQR 
df2=df2[df2['yearsatcompany'] > np.percentile(df2['yearsatcompany'],25)-n*IQR_2]
print ("Shape Of The After Ouliers: ",df2.shape)

```

Boxplot
```{python}
sns.boxplot(df['yearlysalary'], orient="h").set_title('Yearly Salary -  before removing outliers')
```

```{python}
sns.boxplot(df2['yearlysalary'], orient="h").set_title('Yearly Salary - after removing outliers')
```


Independent-Sample T Test (2 groups)

Top 10 companies in the United States (https://fortune.com/fortune500/)

H0: The means for the two populations are equal.
H1: The means for the two populations are not equal.

```{python}
top10 = df2[df2.company.isin(["Apple","apple","APPLE","Walmart Labs","Walmart","walmart","Amazon","amazon","AMAZON","CVS health","cvs health","CVS Health","UnitedHealth Group","ExxonMobil"
"McKesson"])]

not10 = df2[~df2.company.isin(["Apple","apple","APPLE","Walmart Labs","Walmart","walmart","Amazon","amazon","AMAZON","CVS health","cvs health","CVS Health","UnitedHealth Group","ExxonMobil"
"McKesson"])]
```

```{python}
summary, results = rp.ttest(group1= top10['yearlysalary'], group1_name= "top10",
                            group2= not10['yearlysalary'], group2_name= "not10")

print(summary)
print(results)

df2['topcompany']=np.where((df2['company'].isin(["Apple","apple","APPLE","Walmart Labs","Walmart","walmart","Amazon","amazon","AMAZON","CVS health","cvs health","CVS Health","UnitedHealth Group","ExxonMobil", "McKesson"])) & (~df2['company'].isin([120,128])),1,0)

```
The average yearlysalary for top 10 company, M= 355205.521 , was statistically signigicantly higher than those not-top-10 companies(M= 320767.298); t= 23.239, p < 0.05

# 2. How much the highest earner by job title for each year?

```{python}
print (df2.head())

print (pd.unique(df2.title))
print (df2['title'].nunique())
```


```{python}
print (df2['title'].value_counts())
fig = px.pie(df2, names = 'title', title = 'Title')
fig.show()
```

Avg salary by title
```{python}

avgsalary = df2.groupby('title').mean()['yearlysalary'].reset_index()
print (avgsalary)

avgsalary.plot(kind = 'bar', x = 'title', y = 'yearlysalary', title = 'Average Salary by Job Title', figsize=(15,8))
plt.show()


clarity_ranking = ["Product Manager", "Software Engineer", "Software Engineering Manager", "Data Scientist", "Solution Architect", "Technical Program Manager", "Human Resources", "Product Designer", "Marketing", "Business Analyst", "Hardware Engineer", "Sales", "Recruiter", "Mechanical Engineer", "Management Consultant"]

titleboxplot = sns.boxplot(x="title", y="yearlysalary", color="b", order=clarity_ranking, data=df2, showfliers = False, palette="Blues")
titleboxplot.axes.set_title("Salary Box Plot by Job Title", fontsize=16)
titleboxplot.set_xlabel("Job Title", fontsize=14)
titleboxplot.set_ylabel("Yearly Salary", fontsize=14)
plt.setp(titleboxplot.get_xticklabels(), rotation=90)

plt.show()


```

ANOVA for title



# 3. Does location impact the salaries of the employees? Y

States in US
Does location impact the salaries of the employees? 
```{python}
cate_loc = list(set(list(df['location'])))
len(cate_loc) # 1050

```

```{python}
# Manoj
plt.figure(figsize=(12,8))
df2["location"].value_counts().iloc[:10].plot(kind="bar", color="blue")
plt.title("Top 10 Locations of Workers")
plt.xlabel("Location", size=23)
plt.ylabel("Count", size=23)
plt.xticks(rotation='vertical')
plt.show()
```

Comparing between US states
Countries
Comparing between coountires (US, Europe, India, etc..)

# 4. Does work experience affect the salary of an employee? M
```{python}
sns.scatterplot(data=df2,x = 'yearsofexperience',y ='yearlysalary')
plt.title("Yearly Salary vs Year of Experience")
plt.xticks(rotation='vertical')
```

```{python}
sns.barplot(data=df2,x = 'yearsofexperience',y ='yearlysalary')
plt.title("Yearly Salary vs Year of Experience")
plt.xticks(rotation='vertical')
plt.ylim(100000,650000,100000)
plt.xlim(0,60,5)
```

```{python}
sns.lineplot(data=df2,x = 'yearsofexperience',y ='yearlysalary')
plt.title("Yearly Salary vs Year of Experience")
plt.xticks(rotation='vertical')
plt.ylim(100000,1000000,50000)
plt.xlim(0,43,5)
```

# 5. Is working for more years in the same company affect the salary? B

Boxplot
```{python}
sns.boxplot(df['yearsatcompany']).set_title('Years at Company - before removing outliers')
```

```{python}
sns.boxplot(df2['yearsatcompany']).set_title('Years at Company - after removing outliers')

```
Scatterplot & Linear Regression Fit Line

Before Removing Outliers
```{python}
sns.regplot(x=df["yearsatcompany"], y=df["yearlysalary"], line_kws={"color":"r","alpha":0.7,"lw":2}).set_title('Before removing outliers')
plt.show()

```
After Removing Outliers
```{python}
sns.regplot(x=df2["yearsatcompany"], y=df2["yearlysalary"], line_kws={"color":"r","alpha":0.7,"lw":2}).set_title('After removing outliers')
plt.show()

```

calculate the Pearson's correlation between two variables
```{python}
from scipy.stats import pearsonr
corr, _ = pearsonr(df2['yearsatcompany'], df2['yearlysalary'])
print('Pearsons correlation: %.3f' % corr)
```

# 6. In the recent five years, the average salary keeps the same?

```{python}
# Boxplot: yearlysalary vs timestamp
sns.boxplot(data=df2,x = 'timestamp', y = 'yearlysalary')
plt.title("Yearly Salary vs Year")
plt.ylim(100000,750000,10000)
```

```{python}
# Q-Q Plot (Normality Assumption Check)
unique_time = df2['timestamp'].unique()
for timestamp in unique_time:
    stats.probplot(df2[df2['timestamp'] == timestamp]['yearlysalary'], dist="norm", plot=plt)
    plt.title("Probability Plot - " +  timestamp)
    plt.show()
```
From the above figure, we may assume that the data for each group falls roughly on a straight line.

```{python}
# Hypothesis Testing
# H₀: μ1= μ2 = μ3 = μ4 = μ5
# H₁: Not all yearlysalary means are equal
# α = 0.05


# Create ANOVA backbone table
data = [['Between Groups', '', '', '', '', '', ''], ['Within Groups', '', '', '', '', '', ''], ['Total', '', '', '', '', '', '']] 
anova_table = pd.DataFrame(data, columns = ['Source of Variation', 'SS', 'df', 'MS', 'F', 'P-value', 'F crit']) 
anova_table.set_index('Source of Variation', inplace = True)

# calculate SSTR and update anova table
x_bar = df2['yearlysalary'].mean()
SSTR = df2.groupby('timestamp').count() * (df2.groupby('timestamp').mean() - x_bar)**2
anova_table['SS']['Between Groups'] = SSTR['yearlysalary'].sum()

# calculate SSE and update anova table
SSE = (df2.groupby('timestamp').count() - 1) * df2.groupby('timestamp').std()**2
anova_table['SS']['Within Groups'] = SSE['yearlysalary'].sum()

# calculate SSTR and update anova table
SSTR = SSTR['yearlysalary'].sum() + SSE['yearlysalary'].sum()
anova_table['SS']['Total'] = SSTR

# update degree of freedom
anova_table['df']['Between Groups'] = df2['timestamp'].nunique() - 1
anova_table['df']['Within Groups'] = df2.shape[0] - df2['timestamp'].nunique()
anova_table['df']['Total'] = df2.shape[0] - 1

# calculate MS
anova_table['MS'] = anova_table['SS'] / anova_table['df']

# calculate F 
F = anova_table['MS']['Between Groups'] / anova_table['MS']['Within Groups']
anova_table['F']['Between Groups'] = F

# p-value
anova_table['P-value']['Between Groups'] = 1 - stats.f.cdf(F, anova_table['df']['Between Groups'], anova_table['df']['Within Groups'])

# F critical 
alpha = 0.05
# possible types "right-tailed, left-tailed, two-tailed"
tail_hypothesis_type = "two-tailed"
if tail_hypothesis_type == "two-tailed":
    alpha /= 2
anova_table['F crit']['Between Groups'] = stats.f.ppf(1-alpha, anova_table['df']['Between Groups'], anova_table['df']['Within Groups'])

# Final ANOVA Table
anova_table
```

```{python}
print("The p-value approach to hypothesis testing in the decision rule")
conclusion = "Failed to reject the null hypothesis."
if anova_table['P-value']['Between Groups'] <= alpha:
    conclusion = "Null Hypothesis is rejected."
print("F-score is:", anova_table['F']['Between Groups'], " and p value is:", anova_table['P-value']['Between Groups'])    
print(conclusion)

# Rejact H0

```



# Model Building

Correlation matrix
```{python}
corr_matrix = df2.corr()
print(corr_matrix)
```

```{python}
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

X = df2.loc[:,['timestamp', 'yearsofexperience', 'yearsatcompany', 'totalyearlycompensation']]
y = df2[['yearlysalary']]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)

from sklearn.linear_model import Lasso
regressor = Lasso()
regressor.fit(X_train, y_train)

w_0 = regressor.intercept_
w_1 = regressor.coef_

print('Interception : ', w_0)
print('Coeficient : ', w_1)

score = regressor.score(X_test, y_test)
print('Score: ', score)
print('Accuracy: ' + str(score*100) + '%')


y_pred = regressor.predict(X_test)

print('Predict : ', y_pred)

```


```{python}
# How many NAs in column Education and Race?
old_df['Education'].isna().sum()
# 32272

old_df['Race'].isna().sum()
# 40215

```



# [Additional SMART Questions]

# Highest earner by profession for each year?

# Effect of experience level on salary?


# Which title (role) in the not-top-10 companies should I look for if I want to earn my salary over 200K a year. (I have 3-year of work experience and want to find a job in NY)

# What's the range of yearly salay of a male works in top 10 company in CA (no work experience)?


# Conclusion

