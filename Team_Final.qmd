---
title: "6103 Team"
author: Brooklyn Chen, Manojkumar Yerraguntla, Nayaeun Kwon
format:
    html:    
        code-fold: true
        number-sections: true
        toc: true
        toc-depth: 6
        toc-float: true
        toc-location: left
execute: 
  result: hide
  warning: false
---

```{python}
#| output: false
#| Importing the Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import rfit 
import plotly.express as px
import scipy.stats as stats
import sklearn
from sklearn.datasets import load_boston 
import researchpy as rp
from scipy.stats import pearsonr
import pandas_profiling as pp

pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
pd.set_option('display.width', 1000)
pd.set_option('display.colheader_justify', 'center')
pd.set_option('display.precision', 3)
```

# Dataset
```{python}
#| output: false

# Important the Salary DataSet from .CSV file
old_df=pd.read_csv('Levels_Fyi_Salary_Data.csv')

# Explore Dataset
old_dfprofile = pp.ProfileReport(old_df)
old_dfprofile
```

```{python}
# Preprocessing Dataset
# Creating a new dataframe with selected Features
df = old_df[['timestamp','company','title','location','yearsofexperience','yearsatcompany', 'gender']]

# Renaming the Totalyearlycompensation variable name into yearlysalary
df['yearlysalary'] = old_df['totalyearlycompensation']

# Coverting timestamp feature from MM-DD-YYYY HH:MM:SS format to YYYY format
df['timestamp'] = pd.to_datetime(df['timestamp']).dt.strftime('%Y')

```

Out of 30 features we have considered the below features in our final Dataframe:

timestamp: When the data was recorded
company: Company name into which employee got selected
title: Jop title of the employee
yearlysalary: Amount of salary earned by the employee
location: Job location 
yearsofexperience: Year of Experience
yearsatcompany: Years of experience at same company
gender: Male or Female


Removed the following variables in our final Dataframe:
level, otherdetails, tag, basesalary, stockgrantvalue, bonus, cityid, dmaid, rowNumber, Race, Education

```{python}
# Observing the Number of Rows of Number of Columns in the dataframe
df.shape
```

```{python}
# Printing the top five Rows of the dataframe
df.head()
```


```{python}
# Descriptive Statistics Summary of the dataframe
df.describe()
```

```{python}
# checking for number of duplicates
df.duplicated().sum()
```

```{python}
# Removing the duplicates from the dataframe
df.drop_duplicates(keep=False,inplace=True)
```

```{python}
# Checking the number of null values 
df.isnull().sum()
```

```{python}
# Removing the null values
df=df.dropna()
```

```{python}
# Rehecking the number of null values
df.isnull().sum()
```

Removing the Outliers:

```{python}
# Removing the Outliers on the basis of yearlysalary
df1 = df.copy()
print ("Shape Of The Before Ouliers: ",df.shape)
n=1.5
IQR_1 = np.percentile(df1['yearlysalary'],75) - np.percentile(df1['yearlysalary'],25)
#outlier = Q3 + n*IQR 8
df1=df1[df1['yearlysalary'] < np.percentile(df1['yearlysalary'],75)+n*IQR_1]
#outlier = Q1 - n*IQR 
df1=df1[df1['yearlysalary'] > np.percentile(df1['yearlysalary'],25)-n*IQR_1]
print ("Shape Of The After Ouliers: ",df1.shape)
```


```{python}
# Removing the Outliers on the basis of yearsatcompany
df2 = df1.copy()
print ("Shape Of The Before Ouliers: ",df.shape)
n=1.5
IQR_2 = np.percentile(df2['yearsatcompany'],75) - np.percentile(df2['yearsatcompany'],25)
#outlier = Q3 + n*IQR 
df2=df2[df2['yearsatcompany'] < np.percentile(df2['yearsatcompany'],75)+n*IQR_2]
#outlier = Q1 - n*IQR 
df2=df2[df2['yearsatcompany'] > np.percentile(df2['yearsatcompany'],25)-n*IQR_2]
print ("Shape Of The After Ouliers: ",df2.shape)
```


```{python}
# Removing the Outliers on the basis of yearsofexperience
df3 = df2.copy()
print ("Shape Of The Before Ouliers: ",df.shape)
n=1.5
IQR_3 = np.percentile(df3['yearsofexperience'],75) - np.percentile(df3['yearsofexperience'],25)
#outlier = Q3 + n*IQR 
df3=df3[df3['yearsofexperience'] < np.percentile(df3['yearsofexperience'],75)+n*IQR_3]
#outlier = Q1 - n*IQR 
df3=df3[df3['yearsofexperience'] > np.percentile(df3['yearsofexperience'],25)-n*IQR_3]
print ("Shape Of The After Ouliers: ",df3.shape)

```

```{python}
# Recalculating the shape of dataframe after removing duplicates, null values, and Outliers
df3.shape
```

```{python}
# Observing the first five rows of the dataframe after removing duplicates, null values, and Outliers
df3.head()
```

```{python}
# Descriptive Statistics Summary of the dataframe after removing duplicates, null values, and Outliers
df3.describe()
```

## Exploratory Data Analysis

# 1. Is there a significant difference between the yearly salary in top 10 companies and the yearly salary in not-top-10 companies? B Done

List all the companys in this dataframe
```{python}
print(f"the unique values:\n{pd.unique(df.company)}")
```






Boxplot
```{python}
sns.boxplot(df['yearlysalary'], orient="h").set_title('Yearly Salary -  before removing outliers')
```

```{python}
sns.boxplot(df3['yearlysalary'], orient="h").set_title('Yearly Salary - after removing outliers')
```


Independent-Sample T Test (2 groups)

Top 10 companies in the United States (https://fortune.com/fortune500/)

H0: The means for the two populations are equal.
H1: The means for the two populations are not equal.

```{python}
top10 = df3[df3.company.isin(["Apple","apple","APPLE","Walmart Labs","Walmart","walmart","Amazon","amazon","AMAZON","CVS health","cvs health","CVS Health","UnitedHealth Group","ExxonMobil"
"McKesson"])]

not10 = df3[~df3.company.isin(["Apple","apple","APPLE","Walmart Labs","Walmart","walmart","Amazon","amazon","AMAZON","CVS health","cvs health","CVS Health","UnitedHealth Group","ExxonMobil"
"McKesson"])]
```

```{python}
summary, results = rp.ttest(group1= top10['yearlysalary'], group1_name= "top10",
                            group2= not10['yearlysalary'], group2_name= "not10")

print(summary)
print(results)

df3['topcompany']=np.where((df3['company'].isin(["Apple","apple","APPLE","Walmart Labs","Walmart","walmart","Amazon","amazon","AMAZON","CVS health","cvs health","CVS Health","UnitedHealth Group","ExxonMobil", "McKesson"])) & (~df3['company'].isin([120,128])),1,0)

```
The average yearlysalary for top 10 company, M= 355205.521 , was statistically signigicantly higher than those not-top-10 companies(M= 320767.298); t= 23.239, p < 0.05

# 2. How much the highest earner by job title for each year? Y

```{python}
print (df3.head())

print (pd.unique(df3.title))
print (df3['title'].nunique())
```


```{python}
print (df3['title'].value_counts())
fig = px.pie(df3, names = 'title', title = 'Title')
fig.show()
```

Avg salary by title
```{python}

avgsalary = df3.groupby('title').mean()['yearlysalary'].reset_index()
print (avgsalary)

avgsalary.plot(kind = 'bar', x = 'title', y = 'yearlysalary', title = 'Average Salary by Job Title', figsize=(15,8))
plt.show()


clarity_ranking = ["Product Manager", "Software Engineer", "Software Engineering Manager", "Data Scientist", "Solution Architect", "Technical Program Manager", "Human Resources", "Product Designer", "Marketing", "Business Analyst", "Hardware Engineer", "Sales", "Recruiter", "Mechanical Engineer", "Management Consultant"]

titleboxplot = sns.boxplot(x="title", y="yearlysalary", color="b", order=clarity_ranking, data=df3, showfliers = False, palette="Blues")
titleboxplot.axes.set_title("Salary Box Plot by Job Title", fontsize=16)
titleboxplot.set_xlabel("Job Title", fontsize=14)
titleboxplot.set_ylabel("Yearly Salary", fontsize=14)
plt.setp(titleboxplot.get_xticklabels(), rotation=90)

plt.show()


```

ANOVA for title



# 3. Does location impact the salaries of the employees? M will ask to his friend

States in US
Does location impact the salaries of the employees? 
```{python}
cate_loc = list(set(list(df['location'])))
len(cate_loc) # 1050

```

```{python}
# Manoj
plt.figure(figsize=(12,8))
df3["location"].value_counts().iloc[:10].plot(kind="bar", color="blue")
plt.title("Top 10 Locations of Workers")
plt.xlabel("Location", size=23)
plt.ylabel("Count", size=23)
plt.xticks(rotation='vertical')
plt.show()
```

Comparing between US states
Countries
Comparing between coountires (US, Europe, India, etc..)

# 4. Does work experience affect the salary of an employee? M will ask to his friend
```{python}
sns.scatterplot(data=df3,x = 'yearsofexperience',y ='yearlysalary')
plt.title("Yearly Salary vs Year of Experience")
plt.xticks(rotation='vertical')
```

```{python}
sns.barplot(data=df3,x = 'yearsofexperience',y ='yearlysalary')
plt.title("Yearly Salary vs Year of Experience")
plt.xticks(rotation='vertical')
plt.ylim(100000,650000,100000)
plt.xlim(0,60,5)
```

```{python}
sns.lineplot(data=df3,x = 'yearsofexperience',y ='yearlysalary')
plt.title("Yearly Salary vs Year of Experience")
plt.xticks(rotation='vertical')
plt.ylim(100000,1000000,50000)
plt.xlim(0,43,5)
```

# 5. Is working for more years in the same company affect the salary? B Done

Boxplot
```{python}
sns.boxplot(df['yearsatcompany']).set_title('Years at Company - before removing outliers')
```

```{python}
sns.boxplot(df3['yearsatcompany']).set_title('Years at Company - after removing outliers')

```
Scatterplot & Linear Regression Fit Line

Before Removing Outliers
```{python}
sns.regplot(x=df["yearsatcompany"], y=df["yearlysalary"], line_kws={"color":"r","alpha":0.7,"lw":2}).set_title('Before removing outliers')
plt.show()

```
After Removing Outliers
```{python}
sns.regplot(x=df3["yearsatcompany"], y=df3["yearlysalary"], line_kws={"color":"r","alpha":0.7,"lw":2}).set_title('After removing outliers')
plt.show()

```

calculate the Pearson's correlation between two variables
```{python}
from scipy.stats import pearsonr
corr, _ = pearsonr(df3['yearsatcompany'], df3['yearlysalary'])
print('Pearsons correlation: %.3f' % corr)
```

# 6. In the recent five years, the average salary keeps the same? B Done

```{python}
# Boxplot: yearlysalary vs timestamp
sns.boxplot(data=df3,x = 'timestamp', y = 'yearlysalary')
plt.title("Yearly Salary vs Year")
plt.ylim(100000,750000,10000)
```

```{python}
# Q-Q Plot (Normality Assumption Check)
unique_time = df3['timestamp'].unique()
for timestamp in unique_time:
    stats.probplot(df3[df3['timestamp'] == timestamp]['yearlysalary'], dist="norm", plot=plt)
    plt.title("Probability Plot - " +  timestamp)
    plt.show()
```
From the above figure, we may assume that the data for each group falls roughly on a straight line.

```{python}
# Hypothesis Testing
# H₀: μ1= μ2 = μ3 = μ4 = μ5
# H₁: Not all yearlysalary means are equal
# α = 0.05


# Create ANOVA backbone table
data = [['Between Groups', '', '', '', '', '', ''], ['Within Groups', '', '', '', '', '', ''], ['Total', '', '', '', '', '', '']] 
anova_table = pd.DataFrame(data, columns = ['Source of Variation', 'SS', 'df', 'MS', 'F', 'P-value', 'F crit']) 
anova_table.set_index('Source of Variation', inplace = True)

# calculate SSTR and update anova table
x_bar = df3['yearlysalary'].mean()
SSTR = df3.groupby('timestamp').count() * (df3.groupby('timestamp').mean() - x_bar)**2
anova_table['SS']['Between Groups'] = SSTR['yearlysalary'].sum()

# calculate SSE and update anova table
SSE = (df3.groupby('timestamp').count() - 1) * df3.groupby('timestamp').std()**2
anova_table['SS']['Within Groups'] = SSE['yearlysalary'].sum()

# calculate SSTR and update anova table
SSTR = SSTR['yearlysalary'].sum() + SSE['yearlysalary'].sum()
anova_table['SS']['Total'] = SSTR

# update degree of freedom
anova_table['df']['Between Groups'] = df3['timestamp'].nunique() - 1
anova_table['df']['Within Groups'] = df3.shape[0] - df3['timestamp'].nunique()
anova_table['df']['Total'] = df3.shape[0] - 1

# calculate MS
anova_table['MS'] = anova_table['SS'] / anova_table['df']

# calculate F 
F = anova_table['MS']['Between Groups'] / anova_table['MS']['Within Groups']
anova_table['F']['Between Groups'] = F

# p-value
anova_table['P-value']['Between Groups'] = 1 - stats.f.cdf(F, anova_table['df']['Between Groups'], anova_table['df']['Within Groups'])

# F critical 
alpha = 0.05
# possible types "right-tailed, left-tailed, two-tailed"
tail_hypothesis_type = "two-tailed"
if tail_hypothesis_type == "two-tailed":
    alpha /= 2
anova_table['F crit']['Between Groups'] = stats.f.ppf(1-alpha, anova_table['df']['Between Groups'], anova_table['df']['Within Groups'])

# Final ANOVA Table
anova_table
```

```{python}
print("The p-value approach to hypothesis testing in the decision rule")
conclusion = "Failed to reject the null hypothesis."
if anova_table['P-value']['Between Groups'] <= alpha:
    conclusion = "Null Hypothesis is rejected."
print("F-score is:", anova_table['F']['Between Groups'], " and p value is:", anova_table['P-value']['Between Groups'])    
print(conclusion)

# Rejact H0

```



# Model Building

Correlation matrix
```{python}
corr_matrix = df3.corr()
print(corr_matrix)

plt.figure(figsize=(12,10))
sns.heatmap(corr_matrix, cmap=plt.cm.CMRmap_r,annot=True)
plt.show() 
```

```{python}
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

X = df3.loc[:,['timestamp', 'yearsofexperience', 'yearsatcompany', 'totalyearlycompensation']]
y = df3[['yearlysalary']]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)

from sklearn.linear_model import Lasso
regressor = Lasso()
regressor.fit(X_train, y_train)

w_0 = regressor.intercept_
w_1 = regressor.coef_

print('Interception : ', w_0)
print('Coeficient : ', w_1)

score = regressor.score(X_test, y_test)
print('Score: ', score)
print('Accuracy: ' + str(score*100) + '%')


y_pred = regressor.predict(X_test)

print('Predict : ', y_pred)

```


```{python}
# How many NAs in column Education and Race?
old_df['Education'].isna().sum()
# 32272

old_df['Race'].isna().sum()
# 40215

```




# Which title (role) in the not-top-10 companies should I look for if I want to earn my salary over 200K a year. (I have 3-year of work experience and want to find a job in NY)

# What's the range of yearly salay of a male works in top 10 company in CA (no work experience)?


# Conclusion

